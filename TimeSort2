import time
import matplotlib.pyplot as plt
import numpy as np

def quicksort(arr):
    if len(arr) <= 1:
        return arr
    pivot = arr[len(arr) // 2]
    left = [x for x in arr if x < pivot]
    middle = [x for x in arr if x == pivot]
    right = [x for x in arr if x > pivot]
    return quicksort(left) + middle + quicksort(right)

def mergesort(arr):
    if len(arr) <= 1:
        return arr
    mid = len(arr) // 2
    left = mergesort(arr[:mid])
    right = mergesort(arr[mid:])
    return merge(left, right)

def merge(left, right):
    result = []
    i = j = 0
    while i < len(left) and j < len(right):
        if left[i] < right[j]:
            result.append(left[i])
            i += 1
        else:
            result.append(right[j])
            j += 1
    result.extend(left[i:])
    result.extend(right[j:])
    return result

def heapsort(arr):
    def heapify(arr, n, i):
        largest = i
        left = 2 * i + 1
        right = 2 * i + 2
        if left < n and arr[i] < arr[left]:
            largest = left
        if right < n and arr[largest] < arr[right]:
            largest = right
        if largest != i:
            arr[i], arr[largest] = arr[largest], arr[i]
            heapify(arr, n, largest)

    n = len(arr)
    for i in range(n // 2 - 1, -1, -1):
        heapify(arr, n, i)
    for i in range(n - 1, 0, -1):
        arr[i], arr[0] = arr[0], arr[i]
        heapify(arr, i, 0)
    return arr

sizes = []
times_quicksort = []
times_mergesort = []
times_heapsort = []
num_repetitions = 2000

for i in range(1, 1000, 100):
    total_time_quicksort = 0
    total_time_mergesort = 0
    total_time_heapsort = 0
    for _ in range(num_repetitions):
        N = list(np.random.randint(1, 1000, size=i))
        start_time = time.time()
        quicksort(N.copy())
        end_time = time.time()
        total_time_quicksort += end_time - start_time

        start_time = time.time()
        mergesort(N.copy())
        end_time = time.time()
        total_time_mergesort += end_time - start_time

        start_time = time.time()
        heapsort(N.copy())
        end_time = time.time()
        total_time_heapsort += end_time - start_time

    sizes.append(i)
    times_quicksort.append(total_time_quicksort / num_repetitions)
    times_mergesort.append(total_time_mergesort / num_repetitions)
    times_heapsort.append(total_time_heapsort/ num_repetitions)

plt.plot(sizes, times_quicksort, label="quicksort")
plt.plot(sizes, times_mergesort, label="mergesort")
plt.plot(sizes, times_heapsort, label="heapsort")

plt.xlabel("Размер массива")
plt.ylabel("Время сортировки (сек)")
plt.title("Зависимость времени сортировки от размера массива")
plt.legend()
plt.grid(True)
plt.show() 
